pipeline {
    agent any

    parameters {
        choice(
            choices: ['node01', 'node02', 'node03'],
            description: 'Select a node',
            name: 'NODE'
        )
    }

    stages {
        stage('Checkout') {
	        steps {
                checkout scm
            }
        }
        stage('Destroy Cluster') {
            steps {
                script {
                    nodeIP = getNodeIP(params.NODE)
                    // Load the private key from the credentials using the 'withCredentials' step
                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        // Connect to the SSH agent using the loaded private key
                        sshagent(credentials: ['jenkins-private-key']) {
                            echo "Removing MicroK8s"
                            try {
                                sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@${nodeIP} 'snap remove microk8s'"
                            } catch (Exception e) {
                                echo "No MicroK8s installation found."
                            }
                        }
                    }
                }
            }
        }
        stage('Reboot') {
            steps {
                script {
                    // Load the private key from the credentials using the 'withCredentials' step
                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        // Connect to the SSH agent using the loaded private key
                        sshagent(credentials: ['jenkins-private-key']) {
                            try {
                                sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@${nodeIP} 'reboot'"
                                echo "Reboot command sent successfully."
                            } catch (Exception e) {
                                echo "Reboot command failed. This is expected if the node is not reachable."
                            }
                        }
                    }
                }
            }
        }
	    stage('Healthcheck') {
	        steps {
            	script {
            	    // Wait for the node to be healthy
            	    def timeoutSeconds = 600
            	    def startTime = currentBuild.startTimeInMillis
            	    def endTime = startTime + timeoutSeconds * 1000

            	    boolean nodeReachable = false

            	    while (System.currentTimeMillis() < endTime) {
            	        try {
            	            // Load the private key from the credentials using the 'withCredentials' step
            	            withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
            	                // Connect to the SSH agent using the loaded private key
            	                sshagent(credentials: ['jenkins-private-key']) {
            	                    // Attempt to connect to the node over SSH
            	                    sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@${nodeIP} 'exit'"
            	                }
            	            }
            	            // If the SSH connection is successful, break the loop
            	            echo "Node is reachable again."
            	            nodeReachable = true // Set the flag to true if SSH connection is successful
            	            break // Break out of the loop if the node is reachable
                        } catch (Exception e) {
            	            echo "Node is not reachable yet. Retrying in 5 seconds..."
            	            sleep 5
            	        }
            	    }
            	    // Check if the node is reachable and print a message accordingly
            	    if (nodeReachable) {
            	        echo "Node is reachable again."
            	    } else {
            	        error "Node did not boot properly within the specified timeout."
            	    }
            	}
            }
        }
	    stage('Provision') {
	        steps {
	            dir('ansible') {
	                script {
	                    // Load the private key from the credentials using the 'withCredentials' step
	                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
	                        // Connect to the SSH agent using the loaded private key
	                        sshagent(credentials: ['jenkins-private-key']) {
                                sh "ansible-playbook -i inventories/nodes.yml provision.yml -l ${params.NODE} --diff"
	                        }
	                    }
	                }
	            }
	        }
	    }
        stage('Wait for MicroK8s') {
            steps {
                script {
                    def timeoutSeconds = 900
		            //TODO: Add timeout for stage instead of the whole build
                    def startTime = currentBuild.startTimeInMillis
                    def endTime = startTime + timeoutSeconds * 1000
                    def microk8sStatus = ""

                    while (System.currentTimeMillis() < endTime) {
                        try {
                            withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                                sshagent(credentials: ['jenkins-private-key']) {
                                    microk8sStatus = sh(returnStdout: true, script: "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@${nodeIP} '/snap/bin/microk8s status'").trim()
                                }
                            }
                            echo microk8sStatus
                            if (microk8sStatus.contains("microk8s is running")) {
                                echo "MicroK8s is running."
                                break
                            } else {
                                echo "MicroK8s is not yet running. Retrying in 5 seconds..."
                                sleep 5
                            }
                        } catch (Exception e) {
                            echo "Error checking MicroK8s status. Retrying in 5 seconds..."
                            sleep 5
                        }
                    }
                    if (!microk8sStatus.contains("microK8s is running")) {
                        error "MicroK8s did not start within the specified timeout."
                    }
                }
            }
        }
    }
}


def getNodeIP(selectedNode) {
    switch (selectedNode) {
        case 'node01':
            return '192.168.1.211'
        case 'node02':
            return '192.168.1.212'
        case 'node03':
            return '192.168.1.213'
        default:
            error "Invalid node selected."
    }
}
