pipeline {
    agent any

    parameters {
        choice(
            choices: ['no', 'yes'],
            description: 'Destroy the cluster?',
            name: 'DESTROY'
        )
    }

    stages {
        stage('Destroy & Restore Cluster') {
            when {
                expression { params.DESTROY == 'yes' }
            }
            steps {
                script {
                    def restorePipeline = build job: 'restore_all_nodes'
                }
	    }
        }
        stage('Register Nodes') {
            steps {
                script {
                    // Load the private key from the credentials using the 'withCredentials' step
                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        // Connect to the SSH agent using the loaded private key
                        sshagent(credentials: ['jenkins-private-key']) {
		            def addNodeStdout = sh(script: 'ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@getNodeIP(node01) "microk8s add-node" ', returnStdout: true).trim()
                            //sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@getNodeIP(node02) '/bin/bash $addNodeStdout'"
	                    echo "The stdout is: ${addNode}"
                        }
                    }
                }
            }
        }
    }
}


def getNodeIP(node) {
    switch (node) {
        case 'node01':
            return '192.168.1.211'
        case 'node02':
            return '192.168.1.212'
        case 'node03':
            return '192.168.1.213'
        default:
            error "Invalid node selected."
    }
}
