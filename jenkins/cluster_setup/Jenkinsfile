pipeline {
    agent any

    parameters {
        choice(
                choices: ['no', 'yes'],
                description: 'Destroy the cluster?',
                name: 'DESTROY'
        )
    }

    stages {
        stage('Destroy & Restore Cluster') {
            when {
                expression { params.DESTROY == 'yes' }
            }
            steps {
                script {
                    def restorePipeline = build job: 'restore_all_nodes'
                }
            }
        }
        stage('Register Nodes') {
            when {
                expression { params.DESTROY == 'yes' }
            }
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        sshagent(credentials: ['jenkins-private-key']) {
                            echo "Retrieve add node command to execute on pi4, node02 and node03"
                            def addNodeCommand = sh(
                                    script: "ssh -o StrictHostKeyChecking=no -i \$SSH_PRIVATE_KEY root@192.168.1.211 '/snap/bin/microk8s add-node | grep \"microk8s join 192.168.1.211\" | head -1'",
                                    returnStdout: true
                            ).trim()
                            echo "Register node02"
                            //sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@192.168.1.212 '/snap/bin/${addNodeCommand}'"
                            sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@192.168.1.212 '/snap/bin/${addNodeCommand} --worker'"
                            echo "Retrieving new token"
                            addNodeCommand = sh(
                                    script: "ssh -o StrictHostKeyChecking=no -i \$SSH_PRIVATE_KEY root@192.168.1.211 '/snap/bin/microk8s add-node | grep \"microk8s join 192.168.1.211\" | head -1'",
                                    returnStdout: true
                            ).trim()
                            echo "Register node03"
                            //sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@192.168.1.213 '/snap/bin/${addNodeCommand}'"
                            sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@192.168.1.213 '/snap/bin/${addNodeCommand} --worker'"
                            echo "Retrieving new token"
                            addNodeCommand = sh(
                                    script: "ssh -o StrictHostKeyChecking=no -i \$SSH_PRIVATE_KEY root@192.168.1.211 '/snap/bin/microk8s add-node | grep \"microk8s join 192.168.1.211\" | head -1'",
                                    returnStdout: true
                            ).trim()
                            echo "Register pi4"
                            sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@192.168.1.247 '/snap/bin/${addNodeCommand} --worker'"

                            //echo "Verify that High Availability is enabled"
                            //def timeoutSeconds = 1800
                            //def startTime = currentBuild.startTimeInMillis
                            //def endTime = startTime + timeoutSeconds * 1000
                            //def haStatus = ""

                            //while (System.currentTimeMillis() < endTime) {
                            //    try {
                            //        withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                            //            sshagent(credentials: ['jenkins-private-key']) {
                            //                haStatus = sh(returnStdout: true, script: "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@192.168.1.211 '/snap/bin/microk8s status'").trim()
                            //            }
                            //        }
                            //        echo haStatus
                            //        if (haStatus.contains("high-availability: yes")) {
                            //            echo "High Availability is enabled."
                            //            break
                            //        } else {
                            //            echo "High Availability is not yet enabled. Retrying in 5 seconds..."
                            //            sleep 5
                            //        }
                            //    } catch (Exception e) {
                            //        echo "Error checking HA status. Retrying in 5 seconds..."
                            //        sleep 5
                            //    }
                            //}
                            //if (!haStatus.contains("high-availability: yes")) {
                            //    error "High Availability was not enabled within the specified timeout."
                            //}
                        }
                    }
                }
            }
        }
        stage('Retrieve MicroK8s Config') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        sshagent(credentials: ['jenkins-private-key']) {
                            echo "Creating .kube directory"
                            sh "mkdir ~/.kube || true"
                            echo "Retrieving MicroK8s Config file"
                            sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@192.168.1.211 '/snap/bin/microk8s config' > ~/.kube/config"
                            echo "Adapting permissions for kubeconfig"
                            sh "chmod 600 ~/.kube/config"
                        }
                    }
                }
            }
        }
        stage('Base installations') {
            parallel {
                stage('Activate NFS Provisioner') {
                    steps {
                        script {
                            withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                                sshagent(credentials: ['jenkins-private-key']) {
                                    echo "Deploying nfs-subdir-external-provisioner"
                                    sh "helm dependency update helm/cluster-config/nfs-subdir-external-provisioner"
                                    sh "helm upgrade --install nfs-subdir-external-provisioner helm/cluster-config/nfs-subdir-external-provisioner -n nfs-subdir-external-provisioner --create-namespace"
                                }
                            }
                        }
                    }
                }
                stage('Install kube-image-keeper') {
                    steps {
                        script {
                            withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                                sshagent(credentials: ['jenkins-private-key']) {
                                    echo "Installing cert-manager"
                                    sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@192.168.1.211 '/snap/bin/microk8s enable cert-manager'"
                                    echo "Installing kube-image-keeper"
                                    sh "helm dependency update helm/cluster-config/kuik-system"
                                    sh "helm upgrade --install kube-image-keeper helm/cluster-config/kuik-system -n kuik-system --create-namespace"
                                    sh "kubectl wait --for=condition=ready --timeout=2700s pod --all -n kuik-system"
                                }
                            }
                        }
                    }
                }
            }
        }
        //stage ('Enable Netdata Monitoring') {
        //    steps {
        //        script {
        //            withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
        //                sshagent(credentials: ['jenkins-private-key']) {
        //                    withCredentials([usernamePassword(credentialsId: 'netdata', usernameVariable: 'PARENT_CLAIMING_TOKEN', passwordVariable: 'CHILD_CLAIMING_TOKEN')]) {
        //                        echo "Adding netdata Helm Repository"
        //                        sh "helm repo add netdata https://netdata.github.io/helmchart/"
        //                        echo "Deploying netdata Helm Chart"
        //                        sh "helm upgrade --install netdata netdata/netdata --set image.tag=latest --set parent.claiming.enabled=\"true\" --set parent.claiming.token=$PARENT_CLAIMING_TOKEN --set parent.claiming.rooms=1c24b7d3-e2c5-429a-9bf7-bbbf84a4d444 --set child.claiming.enabled=\"true\" --set child.claiming.token=$CHILD_CLAIMING_TOKEN --set child.claiming.rooms=1c24b7d3-e2c5-429a-9bf7-bbbf84a4d444"
        //                    }
        //                }
        //            }
        //        }
        //    }
        //}
        stage('Enable addons') {
            steps {
                script {
                    //def addons = ['ingress', 'metallb:192.168.1.211-192.168.1.214', 'dns', 'metrics-server', 'community', 'observability']
                    //def addons = ['ingress', 'metallb:192.168.1.211-192.168.1.214', 'dns', 'metrics-server']
                    def addons = ['dns', 'metrics-server', 'observability']
                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        sshagent(credentials: ['jenkins-private-key']) {
                            for (def addon in addons) {
                                echo "Enabling addon: ${addon}"
                                sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@192.168.1.211 '/snap/bin/microk8s enable ${addon}'"
                            }
                            sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@192.168.1.211 '/snap/bin/microk8s disable hostpath-storage || true'"
                        }
                    }
                }
            }
        }
        stage('Install ArgoCD') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        sshagent(credentials: ['jenkins-private-key']) {
                            echo "Install ArgoCD"
                            sh "helm dependency update helm/cluster-config/argocd"
                            sh "helm upgrade --install argocd helm/cluster-config/argocd -n argocd --create-namespace"
                            echo "Install custom resources for ArgoCD"
                            sh "helm upgrade --install argocd helm/cluster-config/argocd -n argocd --create-namespace" //running twice since there is a condition in the ApplicationSet Helm Template
                            echo "Sleeping for 10 minutes, until the resources are initialized."
                            sleep 600
                            sh "kubectl wait --for=condition=Ready --timeout=2700s pods --all -n argocd"
                        }
                    }
                }
            }
        }
        stage('Trigger Image Build Pipeline') {
            steps {
                script {
                    echo "Waiting for Harbor to become available"
                    //sh "kubectl wait --for=condition=Ready --timeout=2700s pods --all -n harbor" //TODO: for some reason not working as ready is never achieved?
                    //def buildPipeline = build job: 'image_builds'
                }
            }
        }
        //stage('Rescale MyRecipes Deployment') {
        //    steps {
        //        script {
        //            withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
        //                sshagent(credentials: ['jenkins-private-key']) {
        //                    sh "kubectl scale --replicas=0 deployment/myrecipes-backend -n myrecipes"
        //                    sh "kubectl scale --replicas=0 deployment/myrecipes-frontend -n myrecipes"
        //                    sh "kubectl scale --replicas=2 deployment/myrecipes-backend -n myrecipes"
        //                    sh "kubectl scale --replicas=2 deployment/myrecipes-frontend -n myrecipes"
        //                    echo "Sleeping for 1 minute, until the deployments have been rescaled."
        //                    sleep 60
        //                    sh "kubectl wait --for=condition=ready --timeout=2700s pod --all -n myrecipes"
        //                }
        //            }
        //        }
        //    }
        //}
    }

    post {
        always {
            script {
                def title = "Pipeline Status: ${currentBuild.result}"
                def message
                withCredentials([usernamePassword(credentialsId: 'pushover', usernameVariable: 'PUSHOVER_USER_KEY', passwordVariable: 'PUSHOVER_API_TOKEN')]) {
                    if (currentBuild.resultIsBetterOrEqualTo('SUCCESS')) {
                        message = "Cluster successfully installed: ${currentBuild.fullDisplayName}"
                    } else {
                        message = "Cluster installation failed: ${currentBuild.fullDisplayName}"
                    }

                    // Pushover API URL
                    def pushoverUrl = "https://api.pushover.net/1/messages.json"

                    sh "curl -s -F 'token=$PUSHOVER_API_TOKEN' -F 'user=$PUSHOVER_USER_KEY' -F 'message=$message' -F 'title=$title' $pushoverUrl"
                }
            }
        }
    }
}
