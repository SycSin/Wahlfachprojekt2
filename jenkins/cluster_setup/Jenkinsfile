pipeline {
    agent any

    parameters {
        choice(
            choices: ['no', 'yes'],
            description: 'Destroy the cluster?',
            name: 'DESTROY'
        )
    }

    stages {
        stage('Destroy & Restore Cluster') {
            when {
                expression { params.DESTROY == 'yes' }
            }
            steps {
                script {
                    def restorePipeline = build job: 'restore_all_nodes'
                }
	    }
        }
        stage('Register Nodes') {
            steps {
                script {
                    // Load the private key from the credentials using the 'withCredentials' step
                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        // Connect to the SSH agent using the loaded private key
			sshagent(credentials: ['jenkins-private-key']) {
			    echo "Retrieve add node command to execute on node02 and node03"
			    def addNodeCommand = sh(
			        script: "ssh -o StrictHostKeyChecking=no -i \$SSH_PRIVATE_KEY root@192.168.1.211 '/snap/bin/microk8s add-node | grep \"microk8s join 192.168.1.211\" | head -1'",
			        returnStdout: true
			    ).trim()
			    echo "Register node02"
            	            sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@192.168.1.212 '/snap/bin/${addNodeCommand}'"
			    echo "Retrieving new token"
			    def addNodeCommand = sh(
			        script: "ssh -o StrictHostKeyChecking=no -i \$SSH_PRIVATE_KEY root@192.168.1.211 '/snap/bin/microk8s add-node | grep \"microk8s join 192.168.1.211\" | head -1'",
			        returnStdout: true
			    ).trim()
			    echo "Register node03"
            	            sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@192.168.1.213 '/snap/bin/${addNodeCommand}'"
			}
                    }
                }
            }
        }
    }
}

