pipeline {
    agent any

    parameters {
        choice(
            choices: ['node01', 'node02', 'node03'],
            description: 'Select a node',
            name: 'NODE'
        )
    }

    stages {
        stage('Checkout') {
	    steps {
                // Use the checkout step to clone the Git repository
                // and set the working directory to the root of the repository
                checkout scm
            }
        }
//        stage('Restore Filesystem') {
//            steps {
//                script {
//                    def nodeIP = getNodeIP(params.NODE)
//                    // Load the private key from the credentials using the 'withCredentials' step
//                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
//                        // Connect to the SSH agent using the loaded private key
//                        sshagent(credentials: ['jenkins-private-key']) {
//                            // Execute the rsync command on the remote node
//                            sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@192.168.1.210 'rsync -a --delete /mnt/ssd/nfs/node-base-template/ /mnt/ssd/nfs/${params.NODE}'"
//                            sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@192.168.1.210 'sed -i \'s#^192\\.168\\.1\\.210:/mnt/ssd/tftpboot#192.168.1.210:/mnt/ssd/tftpboot/${nodeIP}#\' /mnt/ssd/nfs/${params.NODE}/etc/fstab'"
//                            
//                        }
//                    }
//                }
//            }
//        }
//        stage('Reboot') {
//            steps {
//                script {
//                    def nodeIP = getNodeIP(params.NODE)
//                    // Load the private key from the credentials using the 'withCredentials' step
//                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
//                        // Connect to the SSH agent using the loaded private key
//                        sshagent(credentials: ['jenkins-private-key']) {
//                            try {
//                                sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@${nodeIP} 'reboot'"
//                                echo "Reboot command sent successfully."
//                            } catch (Exception ex) {
//                                echo "Reboot command failed. This is expected if the node is not reachable."
//                            }
//                        }
//                    }
//                }
//            }
//        }
//	stage('Healthcheck') {
//	    steps {
//            	script {
//            	    // Wait for the node to be healthy
//            	    def nodeIP = getNodeIP(params.NODE)
//            	    def timeoutSeconds = 900
//            	    def startTime = currentBuild.startTimeInMillis
//            	    def endTime = startTime + timeoutSeconds * 1000
//
//            	    boolean nodeReachable = false // Flag to track if the node becomes reachable
//
//            	    while (System.currentTimeMillis() < endTime) {
//            	        try {
//            	            // Load the private key from the credentials using the 'withCredentials' step
//            	            withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
//            	                // Connect to the SSH agent using the loaded private key
//            	                sshagent(credentials: ['jenkins-private-key']) {
//            	                    // Attempt to connect to the node over SSH
//            	                    sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@${nodeIP} 'exit'"
//            	                }
//            	            }
//            	            // If the SSH connection is successful, break the loop
//            	            echo "Node is reachable again."
//            	            nodeReachable = true // Set the flag to true if SSH connection is successful
//            	            break // Break out of the loop if the node is reachable
//            	        } catch (Exception ex) {
//            	            echo "Node is not reachable yet. Retrying in 10 seconds..."
//            	            sleep 10
//            	        }
//            	    }
//            	    // Check if the node is reachable and print a message accordingly
//            	    if (nodeReachable) {
//            	        echo "Node is reachable again."
//            	    } else {
//            	        error "Node did not boot properly within the specified timeout."
//            	    }
//            	}
//	    }
//        }
	stage('Provision') {
	    steps {
	        dir('ansible') {
	            script {
	                // Load the private key from the credentials using the 'withCredentials' step
	                withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
	                    // Connect to the SSH agent using the loaded private key
	                    sshagent(credentials: ['jenkins-private-key']) {
	                        sh '''
	                            export SSH_PRIVATE_KEY="${SSH_PRIVATE_KEY}"
				    pwd
				    ls -lah
	                            ansible-playbook -i inventory playbooks/restore.yml -l ${params.NODE} --diff
	                        '''
	                    }
	                }
	            }
	        }
	    }
	}
    }
}

def getNodeIP(selectedNode) {
    switch (selectedNode) {
        case 'node01':
            return '192.168.1.211'
        case 'node02':
            return '192.168.1.212'
        case 'node03':
            return '192.168.1.213'
        default:
            error "Invalid node selected."
    }
}
