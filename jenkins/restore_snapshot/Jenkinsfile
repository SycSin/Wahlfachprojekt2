pipeline {
    agent any
    environment {
        // Define the SSH_PRIVATE_KEY variable from the 'jenkins-private-key' credential
        SSH_PRIVATE_KEY = credentials('jenkins-private-key')
    }
    parameters {
        choice(
            choices: ['worker01', 'worker02', 'worker03'],
            description: 'Select a worker',
            name: 'WORKER'
        )
    }

    stages {
        stage('Deploy to Worker') {
            steps {
                script {
                    def workerIP = getWorkerIP(params.WORKER)
                    // Use single quotes in the 'sh' step to prevent interpolation of sensitive variables
                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key')]) {
                        sshagent(credentials: ['jenkins-private-key']) {
                            // Execute the rsync command on the remote worker
                            sh 'ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@192.168.1.210 "rsync -a --delete /mnt/ssd/nfs/worker-base-template/ /mnt/ssd/nfs/${params.WORKER}"'
                            sh 'ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@${workerIP} "reboot"'
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                // Wait for the worker to be healthy
                def workerIP = getWorkerIP(params.WORKER)
                def timeoutSeconds = 600
                def startTime = currentBuild.startTimeInMillis
                def endTime = startTime + timeoutSeconds * 1000

                boolean workerReachable = false // Flag to track if the worker becomes reachable

                while (System.currentTimeMillis() < endTime) {
                    try {
                        // Use single quotes in the 'sh' step to prevent interpolation of sensitive variables
                        withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-private-key')]) {
                            sshagent(credentials: ['jenkins-private-key']) {
                                // Attempt to connect to the worker over SSH
                                sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} root@${workerIP} 'exit'"
                            }
                        }
                        workerReachable = true // Set the flag to true if SSH connection is successful
                        break // Break out of the loop if the worker is reachable
                    } catch (Exception ex) {
                        echo "Worker is not reachable yet. Retrying in 10 seconds..."
                        sleep 10
                    }
                }
                // Check if the worker is reachable and print a message accordingly
                if (workerReachable) {
                    echo "Worker is reachable again."
                } else {
                    error "Worker did not boot properly within the specified timeout."
                }
            }
        }
    }
}

def getWorkerIP(selectedWorker) {
    switch (selectedWorker) {
        case 'worker01':
            return '192.168.1.211'
        case 'worker02':
            return '192.168.1.212'
        case 'worker03':
            return '192.168.1.213'
        default:
            error "Invalid worker selected."
    }
}
